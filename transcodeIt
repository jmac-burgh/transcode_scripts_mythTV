#!/bin/bash


# list all directories and create
###############################################################################

sourcePath=$1
destinationPath=$2
logPath=$3
scriptPath=$4

computerName=`uname -n`

###############################################################################
# log appends to specified file prefixing the message with a timestamp.       #
# Takes two parameters. $1 which is the absolute path to the file and $2      #
# which is the message.                                                       #
###############################################################################

function log {
    dirPath=$1
    message=$2
    echo `date +%Y%m%d%H%M%S`'-'$computerName'-'$message >> $dirPath
}

function transcodeVideo {
# --start-at duration:240 --stop-at duration:120
    sourceVideo=$1
    destinationVideo=$2
HandBrakeCLI -i $sourceVideo -o $destinationVideo -e x264  -q 22.0 -r 30 --pfr  -a 1 -E faac -B 128 -6 dpl2 -R Auto -D 0.0  -a 1,2,3,4,5,6 -E copy:ac3 --audio-fallback ffac3 -f mkv -X 1920 -Y 1080 --loose-anamorphic --modulus 2 --x264-preset medium --h264-profile main --h264-level 3.1 & wait $!
echo `basename $sourceVideo`' transcoded to '$destinationVideo
}




#create source directory structures at destination

find $sourcePath -type d > temp.txt   #copy dir structure to temp file
# commented out original because it was choking on sed command.  Probably
# the leading / in path.  Just used the non massaged version of the 
#  source

#sp="${sourcePath//\//'\/'}"           #massage to make sed friendly

sp=$sourcePath
dp="${destinationPath//\//'\/'}"      #massage to make sed friendly
#dp1="s/${sp}/$dp/g"                   #create sed replacement string
dp1="s#${sp}#$dp#g"			# create sed replacement string, note had to use different sed seperator
sed ${dp1} temp.txt > temp2.txt       #create destination path from source path
xargs mkdir -p < temp2.txt            #create directory structure
rm temp.txt temp2.txt                 #remove temporary files

# create exclude list from file
xcludeString='qazQAZwsxWSXedcEDC'
while read excludeThis
do
    if [ ! "$excludeThis" == "" ]; then
        xcludeString=$xcludeString'|'$excludeThis
    fi
done < $scriptPath'/'"excludeList.txt"
#xcludeString=$xcludeString'qazQAZwsxWSXedcEDC'

echo $xcludeString
#read -p "stop!"
$(log $logPath'/'log.txt 'looking for videos to transcode')
find $sourcePath -type f -name "*.mpg"| grep -Ev "$xcludeString" | while read f; do

    fileName=`basename $f` # get filename
    filePath=`dirname $f`  # get path
    fileExtension=${fileName##*.} # extracts the extension for the video file
    fileNameSansExt=${fileName//\.$fileExtension/''} # removes extension from filename
    fileNameTocreate=$fileNameSansExt'.mkv' # this will be the name of the transcoded file
    dp2="${filePath//$sourcePath/$destinationPath}"'/' # create destination from source
    fileToCreate=$dp2''$fileNameTocreate # this is the file to check for and create
    tempFile=$fileToCreate".part"
echo $tempFile
    if [ ! -f $fileToCreate ] && [ ! -f $tempFile ]; then
        touch $tempFile
        $(log $logPath'/'log.txt "creating temp file    "$tempFile)
        $(log $logPath'/'log.txt "starting to transcode "$fileToCreate)
       lkj=$(transcodeVideo $f $fileToCreate)
        $(log $logPath'/'log.txt "finished transcoding  "$fileToCreate)
        rm $tempFile
        $(log $logPath'/'log.txt "removing temp         "$tempFile)
    else
        echo $tempFile' already exists,skipping.....'
    fi

    #echo $fileToCreate


done  
